plugins {
    id 'org.springframework.boot' version '2.4.2'
    // https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-dependency-management
    // https://docs.gradle.org/4.6/userguide/managing_transitive_dependencies.html#sec:bom_import
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'dev.amrw'
version = '0.4.1'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.commons:commons-lang3'
    implementation 'org.apache.logging.log4j:log4j-core'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    implementation 'org.javacord:javacord:3.1.2'
    implementation('org.springframework.boot:spring-boot-starter-actuator') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    implementation('org.springframework.boot:spring-boot-starter-data-jpa') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    implementation('org.springframework.boot:spring-boot-starter-validation') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }

    annotationProcessor 'org.projectlombok:lombok'

    compileOnly 'org.projectlombok:lombok'

    runtimeOnly 'org.postgresql:postgresql'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

springBoot {
    buildInfo()
}

test {
    useJUnitPlatform {
        excludeTags 'integration-test'
    }
}

task integrationTest(type: Test) {
    useJUnitPlatform {
        includeTags 'integration-test'
    }
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        // Display `unchecked` warnings
        options.compilerArgs << '-Xlint:unchecked'
    }
}
