name: Docker

on:
  push:
    paths:
      - '.github/workflows/docker.yml'
      - 'bin/**'
      - 'docker/**'
      - 'gradle/**'
      - 'src/main/**.java'
      - 'src/main/resources/**'
      - 'build.gradle'
      - 'gradle.properties'
      - 'settings.gradle'

env:
  USE_CACHE: 'true'
  MAIN_IMAGE: 'ggbot'
  REGISTRY: 'ghcr.io'
  TMP_CACHE: 'cache-tmp'

  SET_VARIABLES: |
    if [ 'true' = "$USE_CACHE" ]; then
      build_image="${MAIN_IMAGE}-gradle-build"
      echo "BUILD_IMAGE=${build_image}" >> $GITHUB_ENV
      echo "BUILD_CONTAINER_CACHE=${REGISTRY}/${GITHUB_ACTOR}/${build_image}" >> $GITHUB_ENV
      echo "MAIN_CONTAINER_CACHE=${REGISTRY}/${GITHUB_ACTOR}/${MAIN_IMAGE}" >> $GITHUB_ENV
    fi

jobs:
  docker:
    name: 'Docker: build and test'
    runs-on: ubuntu-latest
    steps:
      - name: Clone the repository
        uses: actions/checkout@v2

      - name: Cache ./tmp/*
        uses: actions/cache@v2
        with:
          path: ./tmp
          key: ${{ runner.os }}-build-${{ env.TMP_CACHE }}-${{ hashFiles('./tmp/*') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.TMP_CACHE }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Python requirements
        run: |
          sudo python3 -m pip install -U pip
          sudo python3 -m pip install -U setuptools
          pip3 install -r ./bin/requirements.txt

      - name: Set variables
        run: ${{ env.SET_VARIABLES }}

      - name: Log into the Docker registry
        if: ${{ 'true' == env.USE_CACHE }}
        run: echo "${{ secrets.CR_PAT }}" | docker login "$REGISTRY" --username "$GITHUB_ACTOR" --password-stdin

      - name: Pull cached images
        if: ${{ 'true' == env.USE_CACHE }}
        run: |
          docker pull "$BUILD_CONTAINER_CACHE" || echo "::warning::Failed to pull ${BUILD_CONTAINER_CACHE}"
          docker pull "$MAIN_CONTAINER_CACHE" || echo "::warning::Failed to pull ${MAIN_CONTAINER_CACHE}"

      - name: Build and run the container
        run: |
          if [ 'true' = "$USE_CACHE" ]; then
            cache_from="--cache-from ${BUILD_CONTAINER_CACHE} --cache-from ${MAIN_CONTAINER_CACHE}"
          fi

          # Set required envars
          export POSTGRES_URL='jdbc:postgresql://localhost:5432'
          export POSTGRES_DB='ggbot'
          export POSTGRES_USER='postgres'
          export POSTGRES_PASSWORD="$(xxd -l 16 -c 16 -p < /dev/random)"

          export SPRING_DATASOURCE_URL='jdbc:postgresql://ggbot-database:5432/ggbot'
          export SPRING_DATASOURCE_USERNAME='spring_user'
          export SPRING_DATASOURCE_PASSWORD='SpringUserPassword'

          # shellcheck disable=SC2086
          ./bin/run.py --apply-migrations --detach $cache_from

      - name: Tag and push the images
        if: ${{ 'true' == env.USE_CACHE }}
        run: |
          if docker tag "$BUILD_IMAGE" "$BUILD_CONTAINER_CACHE"; then
            docker push "$BUILD_CONTAINER_CACHE" || echo "::warning::Failed to push ${BUILD_CONTAINER_CACHE}"
          else
            echo "::warning::Failed to tag ${BUILD_IMAGE}"
          fi
          if docker tag "$MAIN_IMAGE" "$MAIN_CONTAINER_CACHE"; then
            docker push "$MAIN_CONTAINER_CACHE" || echo "::warning::Failed to push ${MAIN_CONTAINER_CACHE}"
          else
            echo "::warning::Failed to tag ${MAIN_IMAGE}"
          fi

      - name: Test the API
        run: |
          sleep 15 # Wait for Tomcat to come up
          ./bin/api_tests.py

      - name: Teardown
        run: ./bin/teardown.py --db --network
