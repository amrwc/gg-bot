plugins {
    id 'application'
}

group = 'dev.amrw'
mainClassName = 'dev.amrw.runner.Application'
version = '0.0.1'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    dockerJavaVersion = '3.2.7'
    jacksonVersion = '2.12.2'
    junitVersion = '5.7.1'
    log4jVersion = '2.14.1'
    lombokVersion = '1.18.18'
    // mockitoVersion = '3.8.0' // Doesn't get pulled, for some reason
    mockitoVersion = '3.6.28'
    picocliVersion = '4.6.1'
}

dependencies {
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"
    implementation "com.github.docker-java:docker-java-core:${dockerJavaVersion}"
    implementation "com.github.docker-java:docker-java-transport-httpclient5:${dockerJavaVersion}"
    implementation 'commons-chain:commons-chain:1.2'
    implementation "info.picocli:picocli:${picocliVersion}"
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"

    annotationProcessor "info.picocli:picocli-codegen:${picocliVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"

    testImplementation 'org.assertj:assertj-core:3.19.0'
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"

    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}") {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

test {
    useJUnitPlatform()
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        // Display `unchecked` warnings
        options.compilerArgs << '-Xlint:unchecked'
    }
}
